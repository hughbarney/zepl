;;
;; ZEPL a tiny Emacs editor core with a tiny lisp extension language
;; hughbarney AT googlemail.com
;;
;; The editor provides only basic buffer movement and edit functions
;; everything else is done by extending the user interface using the
;; lisp extension language. Functions can be bound to keys using set-key.
;; For example: (set-key "c-k" "(kill-to-eol)")
;; 
;; place zepl.rc in your home direcory and it is run when zepl starts up.
;;

(defun repeat (n func)  
  (cond ((> n 0) (func) (repeat (- n 1) func))))

(defun duplicate_line()
  (beginning-of-line)
  (set-mark)
  (next-line)
  (beginning-of-line)
  (copy-region)
  (yank)
  (previous-line))

;; second example that uses if and progn
(defun kill-to-eol()
  (if (eq "\n" (get-char))
    (progn
      (delete))
    (progn
      (set-mark)
      (end-of-line)
      (kill-region))))

;;
;; prompt for a keystroke then show its name
;; (once we have string.append we can display both name and funcname in the message
;;
(defun describe-key()
  (prompt "Describe Key: " "")
  (setq key (get-key))
  (cond
    ((not (eq key "")) (message key))
    (t (message (get-key-funcname)))))


(set-key "esc-a" "(duplicate_line)")
(set-key "c-k" "(kill-to-eol)")
(set-key "c-x ?" "(describe-key)")
